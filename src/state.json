{
  "title": "Architecture",
  "template": "docs://_default",
  "data": [
    {
      "type": "builtin://markdown",
      "id": "1",
      "data": {
        "title": "System Architecture Overview",
        "text": "The Coralbits Page Editor follows a **microservices-first** architecture designed for scalability, \nmaintainability, and flexibility. The system is built around the principle that each component \nshould be independent and replaceable.\n\n## Core Principles\n\n- **Component Independence**: Each component is self-contained and can be developed/deployed independently\n- **API-First Design**: All interactions happen through well-defined APIs\n- **Stateless Operations**: The system maintains no server-side state\n- **Caching Strategy**: Intelligent caching for performance optimization\n- **Extensibility**: Easy to add new components and features\n\n## High-Level Architecture\n\n```\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Web Browser   \u2502    \u2502   Mobile App    \u2502    \u2502   API Client    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502                      \u2502                      \u2502\n          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                 \u2502\n            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n            \u2502                    \u2502                    \u2502\n            \u25bc                    \u25bc                    \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Page Editor   \u2502    \u2502   Page Renderer \u2502    \u2502   Component API \u2502\n\u2502     Server      \u2502    \u2502     Service     \u2502    \u2502     Gateway     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502                      \u2502                      \u2502\n          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                 \u2502\n            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n            \u2502                    \u2502                    \u2502\n            \u25bc                    \u25bc                    \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Built-in      \u2502    \u2502   External      \u2502    \u2502   Custom        \u2502\n\u2502   Components    \u2502    \u2502   Components    \u2502    \u2502   Components    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n```\n"
      }
    },
    {
      "type": "builtin://markdown",
      "id": "2",
      "data": {
        "title": "Core Components",
        "text": "## Page Editor Server\n\nThe main server that handles page editing, rendering, and management.\n\n**Responsibilities:**\n- Serve the editor interface\n- Handle page CRUD operations\n- Manage component configurations\n- Provide API endpoints\n- Handle file uploads\n\n**Key Features:**\n- RESTful API design\n- WebSocket support for real-time updates\n- File system integration\n- Caching layer\n- Authentication and authorization\n\n## Page Renderer Service\n\nDedicated service for rendering pages to HTML.\n\n**Responsibilities:**\n- Convert YAML page definitions to HTML\n- Apply component templates\n- Generate CSS styles\n- Optimize output for performance\n- Handle component dependencies\n\n**Rendering Pipeline:**\n1. **Parse YAML**: Load and validate page structure\n2. **Resolve Components**: Load component templates and styles\n3. **Apply Templates**: Render each component with its data\n4. **Generate CSS**: Compile component styles\n5. **Optimize**: Minify and optimize output\n6. **Cache**: Store rendered result for future requests\n\n## Component API Gateway\n\nManages communication with external component services.\n\n**Responsibilities:**\n- Route requests to external components\n- Handle component discovery\n- Manage component health checks\n- Provide fallback mechanisms\n- Load balancing across component instances\n"
      }
    },
    {
      "type": "builtin://markdown",
      "id": "3",
      "data": {
        "title": "Component Architecture",
        "text": "## Component Types\n\n### Built-in Components\n\nComponents that are part of the core system:\n\n- **Location**: `templates/` directory\n- **Implementation**: HTML templates + CSS + JavaScript\n- **Configuration**: Defined in `config.yaml`\n- **Deployment**: Bundled with the main application\n\n**Advantages:**\n- Fast rendering (no network calls)\n- Guaranteed availability\n- Consistent behavior\n- Easy debugging\n\n### External Components\n\nComponents hosted as separate microservices:\n\n- **Location**: External services\n- **Implementation**: Independent applications\n- **Communication**: HTTP/REST APIs\n- **Deployment**: Separate deployment pipeline\n\n**Advantages:**\n- Independent scaling\n- Technology flexibility\n- Team autonomy\n- Isolated failures\n\n### Custom Components\n\nUser-defined components:\n\n- **Location**: User's project directory\n- **Implementation**: User's choice of technology\n- **Integration**: Via configuration\n- **Deployment**: User's responsibility\n\n## Component Interface\n\nAll components follow a standard interface:\n\n```yaml\n# Component Definition\nname: component-name\nviewer: url-to-view-template\ncss: url-to-css-file\neditor: url-to-editor-interface\n```\n\n**Required Endpoints:**\n\n- **Viewer**: Returns HTML for displaying the component\n- **CSS**: Returns styles for the component\n- **Editor**: Returns HTML for editing the component\n\n**Optional Endpoints:**\n\n- **JavaScript**: Returns client-side logic\n- **Validation**: Returns validation rules\n- **Preview**: Returns preview data\n"
      }
    },
    {
      "type": "builtin://markdown",
      "id": "4",
      "data": {
        "title": "Data Flow",
        "text": "## Page Rendering Flow\n\n```\n1. Client Request\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502   Browser   \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502 HTTP Request\n          \u25bc\n2. Page Loader\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 Page Loader \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502 YAML Data\n          \u25bc\n3. Component Resolver\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 Component   \u2502\n   \u2502 Resolver    \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502 Component Templates\n          \u25bc\n4. Template Engine\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 Template    \u2502\n   \u2502 Engine      \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502 Rendered HTML\n          \u25bc\n5. CSS Compiler\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 CSS         \u2502\n   \u2502 Compiler    \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502 Compiled CSS\n          \u25bc\n6. Response\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502   Browser   \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n```\n\n## Editor Data Flow\n\n```\n1. Editor Load\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502   Editor    \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502 Load Page Data\n          \u25bc\n2. Component Library\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 Component   \u2502\n   \u2502 Library     \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502 Available Components\n          \u25bc\n3. Component Editors\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 Component   \u2502\n   \u2502 Editors     \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502 Editor Interfaces\n          \u25bc\n4. Live Preview\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 Live        \u2502\n   \u2502 Preview     \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502 Preview Updates\n          \u25bc\n5. Save Changes\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502   Editor    \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n```\n"
      }
    },
    {
      "type": "builtin://markdown",
      "id": "5",
      "data": {
        "title": "Caching Strategy",
        "text": "## Multi-Level Caching\n\nThe system implements a sophisticated caching strategy to optimize performance:\n\n### 1. Component Template Cache\n\n**Purpose**: Cache component templates to avoid repeated file I/O\n\n* **Storage**: In-memory cache\n* **TTL**: 1 hour (configurable)\n* **Invalidation**: On template file changes\n\n```\n# Example cache key\ncache_key = f\"template:{component_name}:{template_type}\"\n```\n\n### 2. Rendered Page Cache\n\n**Purpose**: Cache fully rendered pages for fast delivery\n\n**Storage**: Redis (production) / Memory (development)\n**TTL**: 30 minutes (configurable)\n**Invalidation**: On page content changes\n\n```python\n# Example cache key\ncache_key = f\"page:{page_name}:{content_hash}\"\n```\n\n### 3. Component Data Cache\n\n**Purpose**: Cache external component responses\n\n**Storage**: Redis\n**TTL**: 5 minutes (configurable)\n**Invalidation**: Based on component's cache headers\n\n```python\n# Example cache key\ncache_key = f\"component:{component_name}:{data_hash}\"\n```\n\n## Cache Invalidation Strategy\n\n### Automatic Invalidation\n\n- **File Changes**: Monitor file system for changes\n- **Content Changes**: Hash-based content detection\n- **Time-based**: TTL expiration\n- **Manual**: API endpoints for manual invalidation\n\n### Cache Warming\n\n- **Pre-render**: Render popular pages on startup\n- **Background**: Periodic re-rendering of cached pages\n- **Predictive**: Cache pages based on usage patterns\n"
      }
    },
    {
      "type": "builtin://markdown",
      "id": "6",
      "data": {
        "title": "Security Architecture",
        "text": "## Security Layers\n\n### 1. Input Validation\n\n**YAML Validation**: Validate page structure and content\n**Component Data**: Validate component input data\n**File Uploads**: Validate file types and sizes\n**API Requests**: Validate request format and content\n\n```python\n# Example validation\ndef validate_component_data(data):\n    required_fields = ['type', 'data']\n    for field in required_fields:\n        if field not in data:\n            raise ValidationError(f\"Missing required field: {field}\")\n```\n\n### 2. Output Sanitization\n\n**HTML Sanitization**: Clean HTML output to prevent XSS\n**CSS Sanitization**: Validate CSS properties\n**JavaScript Sanitization**: Validate and sanitize JS code\n\n```python\n# Example HTML sanitization\nfrom bleach import clean\n\ndef sanitize_html(html_content):\n    allowed_tags = ['p', 'h1', 'h2', 'h3', 'strong', 'em', 'a']\n    allowed_attrs = {'a': ['href']}\n    return clean(html_content, tags=allowed_tags, attributes=allowed_attrs)\n```\n\n### 3. Access Control\n\n**Authentication**: JWT-based authentication\n**Authorization**: Role-based access control\n**Rate Limiting**: Prevent abuse and DoS attacks\n**CORS**: Control cross-origin requests\n\n### 4. Data Protection\n\n**Encryption**: Encrypt sensitive data at rest\n**TLS**: Secure communication channels\n**Secrets Management**: Secure handling of API keys and secrets\n**Audit Logging**: Track all system activities\n"
      }
    },
    {
      "type": "builtin://markdown",
      "id": "7",
      "data": {
        "title": "Scalability Design",
        "text": "## Horizontal Scaling\n\nThe architecture supports horizontal scaling through:\n\n### Load Balancing\n\n- **Multiple Instances**: Run multiple server instances\n- **Load Balancer**: Distribute requests across instances\n- **Health Checks**: Monitor instance health\n- **Auto-scaling**: Scale based on demand\n\n### Stateless Design\n\n- **No Server State**: Each request is independent\n- **Shared Storage**: Use external storage for shared data\n- **Session Management**: External session storage\n- **Configuration**: External configuration management\n\n## Performance Optimization\n\n### 1. Rendering Optimization\n\n- **Parallel Processing**: Render components in parallel\n- **Lazy Loading**: Load components on demand\n- **Streaming**: Stream large responses\n- **Compression**: Compress responses\n\n### 2. Database Optimization\n\n- **Connection Pooling**: Reuse database connections\n- **Query Optimization**: Optimize database queries\n- **Indexing**: Proper database indexing\n- **Read Replicas**: Use read replicas for scaling\n\n### 3. CDN Integration\n\n- **Static Assets**: Serve static files via CDN\n- **Global Distribution**: Distribute content globally\n- **Edge Caching**: Cache at edge locations\n- **Compression**: Compress assets\n\n## Monitoring and Observability\n\n### Metrics Collection\n\n- **Application Metrics**: Request rates, response times, error rates\n- **System Metrics**: CPU, memory, disk usage\n- **Business Metrics**: Page views, user engagement\n- **Custom Metrics**: Component usage, rendering times\n\n### Logging Strategy\n\n- **Structured Logging**: JSON-formatted logs\n- **Log Levels**: DEBUG, INFO, WARNING, ERROR\n- **Log Aggregation**: Centralized log collection\n- **Log Retention**: Configurable retention policies\n\n### Health Checks\n\n- **Liveness Probes**: Check if service is running\n- **Readiness Probes**: Check if service is ready to serve\n- **Component Health**: Check external component health\n- **Dependency Health**: Check database, cache, etc.\n"
      }
    },
    {
      "type": "builtin://markdown",
      "id": "8",
      "data": {
        "title": "Deployment Architecture",
        "text": "## Container-Based Deployment\n\n### Docker Containers\n\n- **Application Container**: Main application server\n- **Component Containers**: Individual component services\n- **Database Container**: Database service\n- **Cache Container**: Redis cache service\n\n### Container Orchestration\n\n- **Kubernetes**: Container orchestration platform\n- **Service Discovery**: Automatic service discovery\n- **Load Balancing**: Built-in load balancing\n- **Auto-scaling**: Automatic scaling based on demand\n\n## Environment Management\n\n### Development Environment\n\n- **Local Development**: Docker Compose for local development\n- **Hot Reloading**: Automatic code reloading\n- **Debug Tools**: Integrated debugging tools\n- **Mock Services**: Mock external services\n\n### Production Environment\n\n- **High Availability**: Multiple availability zones\n- **Backup Strategy**: Automated backups\n- **Disaster Recovery**: Disaster recovery procedures\n- **Monitoring**: Comprehensive monitoring\n\n## CI/CD Pipeline\n\n### Continuous Integration\n\n- **Code Quality**: Automated code quality checks\n- **Testing**: Automated testing suite\n- **Security Scanning**: Security vulnerability scanning\n- **Build Process**: Automated build process\n\n### Continuous Deployment\n\n- **Automated Deployment**: Automated deployment to production\n- **Blue-Green Deployment**: Zero-downtime deployments\n- **Rollback Strategy**: Quick rollback capabilities\n- **Feature Flags**: Feature flag management\n"
      }
    }
  ]
}
